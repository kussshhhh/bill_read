// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: splitty/v1/splitty.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignupRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignupRequest) Reset() {
	*x = SignupRequest{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupRequest) ProtoMessage() {}

func (x *SignupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupRequest.ProtoReflect.Descriptor instead.
func (*SignupRequest) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{0}
}

func (x *SignupRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *SignupRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type SignupResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        string                 `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SignupResponse) Reset() {
	*x = SignupResponse{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SignupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupResponse) ProtoMessage() {}

func (x *SignupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupResponse.ProtoReflect.Descriptor instead.
func (*SignupResponse) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{1}
}

func (x *SignupResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type LoginRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password      string                 `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	JwtToken      string                 `protobuf:"bytes,1,opt,name=jwt_token,json=jwtToken,proto3" json:"jwt_token,omitempty"`
	Valid         bool                   `protobuf:"varint,2,opt,name=valid,proto3" json:"valid,omitempty"` // if credentials are true or false
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{3}
}

func (x *LoginResponse) GetJwtToken() string {
	if x != nil {
		return x.JwtToken
	}
	return ""
}

func (x *LoginResponse) GetValid() bool {
	if x != nil {
		return x.Valid
	}
	return false
}

type ReceiptAnalyzeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Image         []byte                 `protobuf:"bytes,1,opt,name=image,proto3" json:"image,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiptAnalyzeRequest) Reset() {
	*x = ReceiptAnalyzeRequest{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAnalyzeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAnalyzeRequest) ProtoMessage() {}

func (x *ReceiptAnalyzeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAnalyzeRequest.ProtoReflect.Descriptor instead.
func (*ReceiptAnalyzeRequest) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{4}
}

func (x *ReceiptAnalyzeRequest) GetImage() []byte {
	if x != nil {
		return x.Image
	}
	return nil
}

type ReceiptItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Quantity      int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`
	PricePerItem  float32                `protobuf:"fixed32,3,opt,name=price_per_item,json=pricePerItem,proto3" json:"price_per_item,omitempty"`
	TotalPrice    float32                `protobuf:"fixed32,4,opt,name=total_price,json=totalPrice,proto3" json:"total_price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceiptItem) Reset() {
	*x = ReceiptItem{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptItem) ProtoMessage() {}

func (x *ReceiptItem) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptItem.ProtoReflect.Descriptor instead.
func (*ReceiptItem) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{5}
}

func (x *ReceiptItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ReceiptItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ReceiptItem) GetPricePerItem() float32 {
	if x != nil {
		return x.PricePerItem
	}
	return 0
}

func (x *ReceiptItem) GetTotalPrice() float32 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

type ReceiptAnalyzeResponse struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ReceiptId           string                 `protobuf:"bytes,1,opt,name=receipt_id,json=receiptId,proto3" json:"receipt_id,omitempty"`
	Status              bool                   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	NameOfEstablishment string                 `protobuf:"bytes,3,opt,name=name_of_establishment,json=nameOfEstablishment,proto3" json:"name_of_establishment,omitempty"`
	Currency            string                 `protobuf:"bytes,4,opt,name=currency,proto3" json:"currency,omitempty"`
	Items               []*ReceiptItem         `protobuf:"bytes,5,rep,name=items,proto3" json:"items,omitempty"`
	NumberOfItems       int32                  `protobuf:"varint,6,opt,name=number_of_items,json=numberOfItems,proto3" json:"number_of_items,omitempty"`
	Subtotal            float32                `protobuf:"fixed32,7,opt,name=subtotal,proto3" json:"subtotal,omitempty"`
	// Types that are valid to be assigned to Tax:
	//
	//	*ReceiptAnalyzeResponse_TaxValue
	//	*ReceiptAnalyzeResponse_TaxNa
	Tax isReceiptAnalyzeResponse_Tax `protobuf_oneof:"tax"`
	// Types that are valid to be assigned to Tip:
	//
	//	*ReceiptAnalyzeResponse_TipValue
	//	*ReceiptAnalyzeResponse_TipNa
	Tip isReceiptAnalyzeResponse_Tip `protobuf_oneof:"tip"`
	// Types that are valid to be assigned to AdditionalCharges:
	//
	//	*ReceiptAnalyzeResponse_AdditionalChargesValue
	//	*ReceiptAnalyzeResponse_AdditionalChargesNa
	AdditionalCharges isReceiptAnalyzeResponse_AdditionalCharges `protobuf_oneof:"additional_charges"`
	Total             float32                                    `protobuf:"fixed32,14,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ReceiptAnalyzeResponse) Reset() {
	*x = ReceiptAnalyzeResponse{}
	mi := &file_splitty_v1_splitty_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiptAnalyzeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiptAnalyzeResponse) ProtoMessage() {}

func (x *ReceiptAnalyzeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_splitty_v1_splitty_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiptAnalyzeResponse.ProtoReflect.Descriptor instead.
func (*ReceiptAnalyzeResponse) Descriptor() ([]byte, []int) {
	return file_splitty_v1_splitty_proto_rawDescGZIP(), []int{6}
}

func (x *ReceiptAnalyzeResponse) GetReceiptId() string {
	if x != nil {
		return x.ReceiptId
	}
	return ""
}

func (x *ReceiptAnalyzeResponse) GetStatus() bool {
	if x != nil {
		return x.Status
	}
	return false
}

func (x *ReceiptAnalyzeResponse) GetNameOfEstablishment() string {
	if x != nil {
		return x.NameOfEstablishment
	}
	return ""
}

func (x *ReceiptAnalyzeResponse) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *ReceiptAnalyzeResponse) GetItems() []*ReceiptItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ReceiptAnalyzeResponse) GetNumberOfItems() int32 {
	if x != nil {
		return x.NumberOfItems
	}
	return 0
}

func (x *ReceiptAnalyzeResponse) GetSubtotal() float32 {
	if x != nil {
		return x.Subtotal
	}
	return 0
}

func (x *ReceiptAnalyzeResponse) GetTax() isReceiptAnalyzeResponse_Tax {
	if x != nil {
		return x.Tax
	}
	return nil
}

func (x *ReceiptAnalyzeResponse) GetTaxValue() float32 {
	if x != nil {
		if x, ok := x.Tax.(*ReceiptAnalyzeResponse_TaxValue); ok {
			return x.TaxValue
		}
	}
	return 0
}

func (x *ReceiptAnalyzeResponse) GetTaxNa() bool {
	if x != nil {
		if x, ok := x.Tax.(*ReceiptAnalyzeResponse_TaxNa); ok {
			return x.TaxNa
		}
	}
	return false
}

func (x *ReceiptAnalyzeResponse) GetTip() isReceiptAnalyzeResponse_Tip {
	if x != nil {
		return x.Tip
	}
	return nil
}

func (x *ReceiptAnalyzeResponse) GetTipValue() float32 {
	if x != nil {
		if x, ok := x.Tip.(*ReceiptAnalyzeResponse_TipValue); ok {
			return x.TipValue
		}
	}
	return 0
}

func (x *ReceiptAnalyzeResponse) GetTipNa() bool {
	if x != nil {
		if x, ok := x.Tip.(*ReceiptAnalyzeResponse_TipNa); ok {
			return x.TipNa
		}
	}
	return false
}

func (x *ReceiptAnalyzeResponse) GetAdditionalCharges() isReceiptAnalyzeResponse_AdditionalCharges {
	if x != nil {
		return x.AdditionalCharges
	}
	return nil
}

func (x *ReceiptAnalyzeResponse) GetAdditionalChargesValue() float32 {
	if x != nil {
		if x, ok := x.AdditionalCharges.(*ReceiptAnalyzeResponse_AdditionalChargesValue); ok {
			return x.AdditionalChargesValue
		}
	}
	return 0
}

func (x *ReceiptAnalyzeResponse) GetAdditionalChargesNa() bool {
	if x != nil {
		if x, ok := x.AdditionalCharges.(*ReceiptAnalyzeResponse_AdditionalChargesNa); ok {
			return x.AdditionalChargesNa
		}
	}
	return false
}

func (x *ReceiptAnalyzeResponse) GetTotal() float32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type isReceiptAnalyzeResponse_Tax interface {
	isReceiptAnalyzeResponse_Tax()
}

type ReceiptAnalyzeResponse_TaxValue struct {
	TaxValue float32 `protobuf:"fixed32,8,opt,name=tax_value,json=taxValue,proto3,oneof"`
}

type ReceiptAnalyzeResponse_TaxNa struct {
	TaxNa bool `protobuf:"varint,9,opt,name=tax_na,json=taxNa,proto3,oneof"`
}

func (*ReceiptAnalyzeResponse_TaxValue) isReceiptAnalyzeResponse_Tax() {}

func (*ReceiptAnalyzeResponse_TaxNa) isReceiptAnalyzeResponse_Tax() {}

type isReceiptAnalyzeResponse_Tip interface {
	isReceiptAnalyzeResponse_Tip()
}

type ReceiptAnalyzeResponse_TipValue struct {
	TipValue float32 `protobuf:"fixed32,10,opt,name=tip_value,json=tipValue,proto3,oneof"`
}

type ReceiptAnalyzeResponse_TipNa struct {
	TipNa bool `protobuf:"varint,11,opt,name=tip_na,json=tipNa,proto3,oneof"`
}

func (*ReceiptAnalyzeResponse_TipValue) isReceiptAnalyzeResponse_Tip() {}

func (*ReceiptAnalyzeResponse_TipNa) isReceiptAnalyzeResponse_Tip() {}

type isReceiptAnalyzeResponse_AdditionalCharges interface {
	isReceiptAnalyzeResponse_AdditionalCharges()
}

type ReceiptAnalyzeResponse_AdditionalChargesValue struct {
	AdditionalChargesValue float32 `protobuf:"fixed32,12,opt,name=additional_charges_value,json=additionalChargesValue,proto3,oneof"`
}

type ReceiptAnalyzeResponse_AdditionalChargesNa struct {
	AdditionalChargesNa bool `protobuf:"varint,13,opt,name=additional_charges_na,json=additionalChargesNa,proto3,oneof"`
}

func (*ReceiptAnalyzeResponse_AdditionalChargesValue) isReceiptAnalyzeResponse_AdditionalCharges() {}

func (*ReceiptAnalyzeResponse_AdditionalChargesNa) isReceiptAnalyzeResponse_AdditionalCharges() {}

var File_splitty_v1_splitty_proto protoreflect.FileDescriptor

var file_splitty_v1_splitty_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x29, 0x0a, 0x0e, 0x53, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x77, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x77, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x22, 0x2d, 0x0a, 0x15, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x0b, 0x52, 0x65,
	0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x63, 0x65, 0x50, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x22, 0xae, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x61, 0x6c,
	0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x4f, 0x66, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69,
	0x73, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x4f, 0x66, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x73, 0x75, 0x62,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x74, 0x61, 0x78, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x74, 0x61, 0x78, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x06, 0x74, 0x61, 0x78, 0x5f, 0x6e, 0x61, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05, 0x74, 0x61, 0x78, 0x4e, 0x61, 0x12, 0x1d, 0x0a,
	0x09, 0x74, 0x69, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x01, 0x52, 0x08, 0x74, 0x69, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x17, 0x0a, 0x06,
	0x74, 0x69, 0x70, 0x5f, 0x6e, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01, 0x52, 0x05,
	0x74, 0x69, 0x70, 0x4e, 0x61, 0x12, 0x3a, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x48, 0x02, 0x52, 0x16, 0x61, 0x64, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x73, 0x5f, 0x6e, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x13, 0x61, 0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x4e, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x05, 0x0a,
	0x03, 0x74, 0x61, 0x78, 0x42, 0x05, 0x0a, 0x03, 0x74, 0x69, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x61,
	0x64, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x73, 0x32, 0xe8, 0x01, 0x0a, 0x0e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x06, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x19,
	0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x18,
	0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e,
	0x61, 0x6c, 0x79, 0x7a, 0x65, 0x12, 0x21, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x74, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x7a,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x74, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x41, 0x6e, 0x61,
	0x6c, 0x79, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x18, 0x5a, 0x16,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x74, 0x79, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_splitty_v1_splitty_proto_rawDescOnce sync.Once
	file_splitty_v1_splitty_proto_rawDescData []byte
)

func file_splitty_v1_splitty_proto_rawDescGZIP() []byte {
	file_splitty_v1_splitty_proto_rawDescOnce.Do(func() {
		file_splitty_v1_splitty_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_splitty_v1_splitty_proto_rawDesc), len(file_splitty_v1_splitty_proto_rawDesc)))
	})
	return file_splitty_v1_splitty_proto_rawDescData
}

var file_splitty_v1_splitty_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_splitty_v1_splitty_proto_goTypes = []any{
	(*SignupRequest)(nil),          // 0: splitty.v1.SignupRequest
	(*SignupResponse)(nil),         // 1: splitty.v1.SignupResponse
	(*LoginRequest)(nil),           // 2: splitty.v1.LoginRequest
	(*LoginResponse)(nil),          // 3: splitty.v1.LoginResponse
	(*ReceiptAnalyzeRequest)(nil),  // 4: splitty.v1.ReceiptAnalyzeRequest
	(*ReceiptItem)(nil),            // 5: splitty.v1.ReceiptItem
	(*ReceiptAnalyzeResponse)(nil), // 6: splitty.v1.ReceiptAnalyzeResponse
}
var file_splitty_v1_splitty_proto_depIdxs = []int32{
	5, // 0: splitty.v1.ReceiptAnalyzeResponse.items:type_name -> splitty.v1.ReceiptItem
	0, // 1: splitty.v1.SplittyService.Signup:input_type -> splitty.v1.SignupRequest
	2, // 2: splitty.v1.SplittyService.Login:input_type -> splitty.v1.LoginRequest
	4, // 3: splitty.v1.SplittyService.ReceiptAnalyze:input_type -> splitty.v1.ReceiptAnalyzeRequest
	1, // 4: splitty.v1.SplittyService.Signup:output_type -> splitty.v1.SignupResponse
	3, // 5: splitty.v1.SplittyService.Login:output_type -> splitty.v1.LoginResponse
	6, // 6: splitty.v1.SplittyService.ReceiptAnalyze:output_type -> splitty.v1.ReceiptAnalyzeResponse
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_splitty_v1_splitty_proto_init() }
func file_splitty_v1_splitty_proto_init() {
	if File_splitty_v1_splitty_proto != nil {
		return
	}
	file_splitty_v1_splitty_proto_msgTypes[6].OneofWrappers = []any{
		(*ReceiptAnalyzeResponse_TaxValue)(nil),
		(*ReceiptAnalyzeResponse_TaxNa)(nil),
		(*ReceiptAnalyzeResponse_TipValue)(nil),
		(*ReceiptAnalyzeResponse_TipNa)(nil),
		(*ReceiptAnalyzeResponse_AdditionalChargesValue)(nil),
		(*ReceiptAnalyzeResponse_AdditionalChargesNa)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_splitty_v1_splitty_proto_rawDesc), len(file_splitty_v1_splitty_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_splitty_v1_splitty_proto_goTypes,
		DependencyIndexes: file_splitty_v1_splitty_proto_depIdxs,
		MessageInfos:      file_splitty_v1_splitty_proto_msgTypes,
	}.Build()
	File_splitty_v1_splitty_proto = out.File
	file_splitty_v1_splitty_proto_goTypes = nil
	file_splitty_v1_splitty_proto_depIdxs = nil
}
